// <auto-generated />
using System;
using FilterLists.Directory.Infrastructure.Persistence.Queries.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FilterLists.Directory.Infrastructure.Migrations.Migrations
{
    [DbContext(typeof(QueryDbContext))]
    [Migration("20211116221734_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FilterLists.Directory.Infrastructure.Persistence.Queries.Entities.Dependent", b =>
                {
                    b.Property<int>("DependencyFilterListId")
                        .HasColumnType("integer")
                        .HasColumnName("dependency_filter_list_id");

                    b.Property<int>("DependentFilterListId")
                        .HasColumnType("integer")
                        .HasColumnName("dependent_filter_list_id");

                    b.HasKey("DependencyFilterListId", "DependentFilterListId")
                        .HasName("pk_dependents");

                    b.HasIndex("DependentFilterListId")
                        .HasDatabaseName("ix_dependents_dependent_filter_list_id");

                    b.ToTable("Dependents", (string)null);
                });

            modelBuilder.Entity("FilterLists.Directory.Infrastructure.Persistence.Queries.Entities.FilterList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ChatUrl")
                        .HasColumnType("text")
                        .HasColumnName("chat_url");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("DonateUrl")
                        .HasColumnType("text")
                        .HasColumnName("donate_url");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("text")
                        .HasColumnName("email_address");

                    b.Property<string>("ForumUrl")
                        .HasColumnType("text")
                        .HasColumnName("forum_url");

                    b.Property<string>("HomeUrl")
                        .HasColumnType("text")
                        .HasColumnName("home_url");

                    b.Property<string>("IssuesUrl")
                        .HasColumnType("text")
                        .HasColumnName("issues_url");

                    b.Property<int?>("LicenseId")
                        .HasColumnType("integer")
                        .HasColumnName("license_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("OnionUrl")
                        .HasColumnType("text")
                        .HasColumnName("onion_url");

                    b.Property<string>("PolicyUrl")
                        .HasColumnType("text")
                        .HasColumnName("policy_url");

                    b.Property<string>("SubmissionUrl")
                        .HasColumnType("text")
                        .HasColumnName("submission_url");

                    b.HasKey("Id")
                        .HasName("pk_filter_lists");

                    b.HasIndex("LicenseId")
                        .HasDatabaseName("ix_filter_lists_license_id");

                    b.ToTable("filter_lists", (string)null);
                });

            modelBuilder.Entity("FilterLists.Directory.Infrastructure.Persistence.Queries.Entities.FilterListLanguage", b =>
                {
                    b.Property<int>("FilterListId")
                        .HasColumnType("integer")
                        .HasColumnName("filter_list_id");

                    b.Property<string>("Iso6391")
                        .HasColumnType("character(2)")
                        .HasColumnName("iso6391");

                    b.HasKey("FilterListId", "Iso6391")
                        .HasName("pk_filter_list_languages");

                    b.HasIndex("Iso6391")
                        .HasDatabaseName("ix_filter_list_languages_iso6391");

                    b.ToTable("FilterListLanguages", (string)null);
                });

            modelBuilder.Entity("FilterLists.Directory.Infrastructure.Persistence.Queries.Entities.FilterListMaintainer", b =>
                {
                    b.Property<int>("FilterListId")
                        .HasColumnType("integer")
                        .HasColumnName("filter_list_id");

                    b.Property<int>("MaintainerId")
                        .HasColumnType("integer")
                        .HasColumnName("maintainer_id");

                    b.HasKey("FilterListId", "MaintainerId")
                        .HasName("pk_filter_list_maintainers");

                    b.HasIndex("MaintainerId")
                        .HasDatabaseName("ix_filter_list_maintainers_maintainer_id");

                    b.ToTable("FilterListMaintainers", (string)null);
                });

            modelBuilder.Entity("FilterLists.Directory.Infrastructure.Persistence.Queries.Entities.FilterListSyntax", b =>
                {
                    b.Property<int>("FilterListId")
                        .HasColumnType("integer")
                        .HasColumnName("filter_list_id");

                    b.Property<int>("SyntaxId")
                        .HasColumnType("integer")
                        .HasColumnName("syntax_id");

                    b.HasKey("FilterListId", "SyntaxId")
                        .HasName("pk_filter_list_syntaxes");

                    b.HasIndex("SyntaxId")
                        .HasDatabaseName("ix_filter_list_syntaxes_syntax_id");

                    b.ToTable("FilterListSyntaxes", (string)null);
                });

            modelBuilder.Entity("FilterLists.Directory.Infrastructure.Persistence.Queries.Entities.FilterListTag", b =>
                {
                    b.Property<int>("FilterListId")
                        .HasColumnType("integer")
                        .HasColumnName("filter_list_id");

                    b.Property<int>("TagId")
                        .HasColumnType("integer")
                        .HasColumnName("tag_id");

                    b.HasKey("FilterListId", "TagId")
                        .HasName("pk_filter_list_tags");

                    b.HasIndex("TagId")
                        .HasDatabaseName("ix_filter_list_tags_tag_id");

                    b.ToTable("FilterListTags", (string)null);
                });

            modelBuilder.Entity("FilterLists.Directory.Infrastructure.Persistence.Queries.Entities.FilterListViewUrl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("FilterListId")
                        .HasColumnType("integer")
                        .HasColumnName("filter_list_id");

                    b.Property<short>("Primariness")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)1)
                        .HasColumnName("primariness");

                    b.Property<short>("SegmentNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)1)
                        .HasColumnName("segment_number");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("pk_filter_list_view_urls");

                    b.HasIndex("FilterListId", "SegmentNumber", "Primariness")
                        .IsUnique()
                        .HasDatabaseName("ix_filter_list_view_urls_filter_list_id_segment_number_primariness");

                    b.ToTable("FilterListViewUrls", (string)null);
                });

            modelBuilder.Entity("FilterLists.Directory.Infrastructure.Persistence.Queries.Entities.Fork", b =>
                {
                    b.Property<int>("UpstreamFilterListId")
                        .HasColumnType("integer")
                        .HasColumnName("upstream_filter_list_id");

                    b.Property<int>("ForkFilterListId")
                        .HasColumnType("integer")
                        .HasColumnName("fork_filter_list_id");

                    b.HasKey("UpstreamFilterListId", "ForkFilterListId")
                        .HasName("pk_forks");

                    b.HasIndex("ForkFilterListId")
                        .HasDatabaseName("ix_forks_fork_filter_list_id");

                    b.ToTable("Forks", (string)null);
                });

            modelBuilder.Entity("FilterLists.Directory.Infrastructure.Persistence.Queries.Entities.Language", b =>
                {
                    b.Property<string>("Iso6391")
                        .HasMaxLength(2)
                        .HasColumnType("character(2)")
                        .HasColumnName("iso6391")
                        .IsFixedLength();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Iso6391")
                        .HasName("pk_languages");

                    b.ToTable("languages", (string)null);
                });

            modelBuilder.Entity("FilterLists.Directory.Infrastructure.Persistence.Queries.Entities.License", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<bool>("PermitsCommercialUse")
                        .HasColumnType("boolean")
                        .HasColumnName("permits_commercial_use");

                    b.Property<bool>("PermitsDistribution")
                        .HasColumnType("boolean")
                        .HasColumnName("permits_distribution");

                    b.Property<bool>("PermitsModification")
                        .HasColumnType("boolean")
                        .HasColumnName("permits_modification");

                    b.Property<string>("Url")
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("pk_licenses");

                    b.ToTable("licenses", (string)null);
                });

            modelBuilder.Entity("FilterLists.Directory.Infrastructure.Persistence.Queries.Entities.Maintainer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("EmailAddress")
                        .HasColumnType("text")
                        .HasColumnName("email_address");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("TwitterHandle")
                        .HasColumnType("text")
                        .HasColumnName("twitter_handle");

                    b.Property<string>("Url")
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("pk_maintainers");

                    b.ToTable("maintainers", (string)null);
                });

            modelBuilder.Entity("FilterLists.Directory.Infrastructure.Persistence.Queries.Entities.Merge", b =>
                {
                    b.Property<int>("IncludedInFilterListId")
                        .HasColumnType("integer")
                        .HasColumnName("included_in_filter_list_id");

                    b.Property<int>("IncludesFilterListId")
                        .HasColumnType("integer")
                        .HasColumnName("includes_filter_list_id");

                    b.HasKey("IncludedInFilterListId", "IncludesFilterListId")
                        .HasName("pk_merges");

                    b.HasIndex("IncludesFilterListId")
                        .HasDatabaseName("ix_merges_includes_filter_list_id");

                    b.ToTable("Merges", (string)null);
                });

            modelBuilder.Entity("FilterLists.Directory.Infrastructure.Persistence.Queries.Entities.Software", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("DownloadUrl")
                        .HasColumnType("text")
                        .HasColumnName("download_url");

                    b.Property<string>("HomeUrl")
                        .HasColumnType("text")
                        .HasColumnName("home_url");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<bool>("SupportsAbpUrlScheme")
                        .HasColumnType("boolean")
                        .HasColumnName("supports_abp_url_scheme");

                    b.HasKey("Id")
                        .HasName("pk_software");

                    b.ToTable("software", (string)null);
                });

            modelBuilder.Entity("FilterLists.Directory.Infrastructure.Persistence.Queries.Entities.SoftwareSyntax", b =>
                {
                    b.Property<int>("SoftwareId")
                        .HasColumnType("integer")
                        .HasColumnName("software_id");

                    b.Property<int>("SyntaxId")
                        .HasColumnType("integer")
                        .HasColumnName("syntax_id");

                    b.HasKey("SoftwareId", "SyntaxId")
                        .HasName("pk_software_syntaxes");

                    b.HasIndex("SyntaxId")
                        .HasDatabaseName("ix_software_syntaxes_syntax_id");

                    b.ToTable("SoftwareSyntaxes", (string)null);
                });

            modelBuilder.Entity("FilterLists.Directory.Infrastructure.Persistence.Queries.Entities.Syntax", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Url")
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("pk_syntaxes");

                    b.ToTable("syntaxes", (string)null);
                });

            modelBuilder.Entity("FilterLists.Directory.Infrastructure.Persistence.Queries.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_tags");

                    b.ToTable("tags", (string)null);
                });

            modelBuilder.Entity("FilterLists.Directory.Infrastructure.Persistence.Queries.Entities.Dependent", b =>
                {
                    b.HasOne("FilterLists.Directory.Infrastructure.Persistence.Queries.Entities.FilterList", "DependencyFilterList")
                        .WithMany("DependentFilterLists")
                        .HasForeignKey("DependencyFilterListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_dependents_filter_lists_filter_list_id1");

                    b.HasOne("FilterLists.Directory.Infrastructure.Persistence.Queries.Entities.FilterList", "DependentFilterList")
                        .WithMany("DependencyFilterLists")
                        .HasForeignKey("DependentFilterListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_dependents_filter_lists_filter_list_id");

                    b.Navigation("DependencyFilterList");

                    b.Navigation("DependentFilterList");
                });

            modelBuilder.Entity("FilterLists.Directory.Infrastructure.Persistence.Queries.Entities.FilterList", b =>
                {
                    b.HasOne("FilterLists.Directory.Infrastructure.Persistence.Queries.Entities.License", null)
                        .WithMany("FilterLists")
                        .HasForeignKey("LicenseId")
                        .HasConstraintName("fk_filter_lists_licenses_license_id");
                });

            modelBuilder.Entity("FilterLists.Directory.Infrastructure.Persistence.Queries.Entities.FilterListLanguage", b =>
                {
                    b.HasOne("FilterLists.Directory.Infrastructure.Persistence.Queries.Entities.FilterList", null)
                        .WithMany("FilterListLanguages")
                        .HasForeignKey("FilterListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_filter_list_languages_filter_lists_filter_list_id");

                    b.HasOne("FilterLists.Directory.Infrastructure.Persistence.Queries.Entities.Language", null)
                        .WithMany("FilterListLanguages")
                        .HasForeignKey("Iso6391")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_filter_list_languages_languages_language_temp_id");
                });

            modelBuilder.Entity("FilterLists.Directory.Infrastructure.Persistence.Queries.Entities.FilterListMaintainer", b =>
                {
                    b.HasOne("FilterLists.Directory.Infrastructure.Persistence.Queries.Entities.FilterList", null)
                        .WithMany("FilterListMaintainers")
                        .HasForeignKey("FilterListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_filter_list_maintainers_filter_lists_filter_list_id");

                    b.HasOne("FilterLists.Directory.Infrastructure.Persistence.Queries.Entities.Maintainer", null)
                        .WithMany("FilterListMaintainers")
                        .HasForeignKey("MaintainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_filter_list_maintainers_maintainers_maintainer_id");
                });

            modelBuilder.Entity("FilterLists.Directory.Infrastructure.Persistence.Queries.Entities.FilterListSyntax", b =>
                {
                    b.HasOne("FilterLists.Directory.Infrastructure.Persistence.Queries.Entities.FilterList", null)
                        .WithMany("FilterListSyntaxes")
                        .HasForeignKey("FilterListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_filter_list_syntaxes_filter_lists_filter_list_id");

                    b.HasOne("FilterLists.Directory.Infrastructure.Persistence.Queries.Entities.Syntax", null)
                        .WithMany("FilterListSyntaxes")
                        .HasForeignKey("SyntaxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_filter_list_syntaxes_syntaxes_syntax_id");
                });

            modelBuilder.Entity("FilterLists.Directory.Infrastructure.Persistence.Queries.Entities.FilterListTag", b =>
                {
                    b.HasOne("FilterLists.Directory.Infrastructure.Persistence.Queries.Entities.FilterList", null)
                        .WithMany("FilterListTags")
                        .HasForeignKey("FilterListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_filter_list_tags_filter_lists_filter_list_id");

                    b.HasOne("FilterLists.Directory.Infrastructure.Persistence.Queries.Entities.Tag", null)
                        .WithMany("FilterListTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_filter_list_tags_tags_tag_id");
                });

            modelBuilder.Entity("FilterLists.Directory.Infrastructure.Persistence.Queries.Entities.FilterListViewUrl", b =>
                {
                    b.HasOne("FilterLists.Directory.Infrastructure.Persistence.Queries.Entities.FilterList", null)
                        .WithMany("ViewUrls")
                        .HasForeignKey("FilterListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_filter_list_view_urls_filter_lists_filter_list_id");
                });

            modelBuilder.Entity("FilterLists.Directory.Infrastructure.Persistence.Queries.Entities.Fork", b =>
                {
                    b.HasOne("FilterLists.Directory.Infrastructure.Persistence.Queries.Entities.FilterList", "ForkFilterList")
                        .WithMany("UpstreamFilterLists")
                        .HasForeignKey("ForkFilterListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_forks_filter_lists_filter_list_id1");

                    b.HasOne("FilterLists.Directory.Infrastructure.Persistence.Queries.Entities.FilterList", "UpstreamFilterList")
                        .WithMany("ForkFilterLists")
                        .HasForeignKey("UpstreamFilterListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_forks_filter_lists_filter_list_id");

                    b.Navigation("ForkFilterList");

                    b.Navigation("UpstreamFilterList");
                });

            modelBuilder.Entity("FilterLists.Directory.Infrastructure.Persistence.Queries.Entities.Merge", b =>
                {
                    b.HasOne("FilterLists.Directory.Infrastructure.Persistence.Queries.Entities.FilterList", "IncludedInFilterList")
                        .WithMany("IncludesFilterLists")
                        .HasForeignKey("IncludedInFilterListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_merges_filter_lists_filter_list_id1");

                    b.HasOne("FilterLists.Directory.Infrastructure.Persistence.Queries.Entities.FilterList", "IncludesFilterList")
                        .WithMany("IncludedInFilterLists")
                        .HasForeignKey("IncludesFilterListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_merges_filter_lists_filter_list_id");

                    b.Navigation("IncludedInFilterList");

                    b.Navigation("IncludesFilterList");
                });

            modelBuilder.Entity("FilterLists.Directory.Infrastructure.Persistence.Queries.Entities.SoftwareSyntax", b =>
                {
                    b.HasOne("FilterLists.Directory.Infrastructure.Persistence.Queries.Entities.Software", null)
                        .WithMany("SoftwareSyntaxes")
                        .HasForeignKey("SoftwareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_software_syntaxes_software_software_id");

                    b.HasOne("FilterLists.Directory.Infrastructure.Persistence.Queries.Entities.Syntax", null)
                        .WithMany("SoftwareSyntaxes")
                        .HasForeignKey("SyntaxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_software_syntaxes_syntaxes_syntax_id");
                });

            modelBuilder.Entity("FilterLists.Directory.Infrastructure.Persistence.Queries.Entities.FilterList", b =>
                {
                    b.Navigation("DependencyFilterLists");

                    b.Navigation("DependentFilterLists");

                    b.Navigation("FilterListLanguages");

                    b.Navigation("FilterListMaintainers");

                    b.Navigation("FilterListSyntaxes");

                    b.Navigation("FilterListTags");

                    b.Navigation("ForkFilterLists");

                    b.Navigation("IncludedInFilterLists");

                    b.Navigation("IncludesFilterLists");

                    b.Navigation("UpstreamFilterLists");

                    b.Navigation("ViewUrls");
                });

            modelBuilder.Entity("FilterLists.Directory.Infrastructure.Persistence.Queries.Entities.Language", b =>
                {
                    b.Navigation("FilterListLanguages");
                });

            modelBuilder.Entity("FilterLists.Directory.Infrastructure.Persistence.Queries.Entities.License", b =>
                {
                    b.Navigation("FilterLists");
                });

            modelBuilder.Entity("FilterLists.Directory.Infrastructure.Persistence.Queries.Entities.Maintainer", b =>
                {
                    b.Navigation("FilterListMaintainers");
                });

            modelBuilder.Entity("FilterLists.Directory.Infrastructure.Persistence.Queries.Entities.Software", b =>
                {
                    b.Navigation("SoftwareSyntaxes");
                });

            modelBuilder.Entity("FilterLists.Directory.Infrastructure.Persistence.Queries.Entities.Syntax", b =>
                {
                    b.Navigation("FilterListSyntaxes");

                    b.Navigation("SoftwareSyntaxes");
                });

            modelBuilder.Entity("FilterLists.Directory.Infrastructure.Persistence.Queries.Entities.Tag", b =>
                {
                    b.Navigation("FilterListTags");
                });
#pragma warning restore 612, 618
        }
    }
}

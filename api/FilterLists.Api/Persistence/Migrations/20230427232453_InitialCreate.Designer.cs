// <auto-generated />
using FilterLists.Api.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FilterLists.Api.Persistence.Migrations
{
    [DbContext(typeof(FilterListsDbContext))]
    [Migration("20230427232453_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("Latin1_General_100_CI_AS_SC")
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FilterLists.Api.Persistence.Entities.Dependent", b =>
                {
                    b.Property<int>("DependencyFilterListId")
                        .HasColumnType("int");

                    b.Property<int>("DependentFilterListId")
                        .HasColumnType("int");

                    b.HasKey("DependencyFilterListId", "DependentFilterListId");

                    b.HasIndex("DependentFilterListId");

                    b.ToTable("Dependent");
                });

            modelBuilder.Entity("FilterLists.Api.Persistence.Entities.FilterList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ChatUrl")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("DonateUrl")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("ForumUrl")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("HomeUrl")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("IssuesUrl")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int>("LicenseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(5);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("OnionUrl")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("PolicyUrl")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("SubmissionUrl")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.HasKey("Id");

                    b.HasIndex("LicenseId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("FilterList");
                });

            modelBuilder.Entity("FilterLists.Api.Persistence.Entities.FilterListLanguage", b =>
                {
                    b.Property<int>("FilterListId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.HasKey("FilterListId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("FilterListLanguage");
                });

            modelBuilder.Entity("FilterLists.Api.Persistence.Entities.FilterListMaintainer", b =>
                {
                    b.Property<int>("FilterListId")
                        .HasColumnType("int");

                    b.Property<int>("MaintainerId")
                        .HasColumnType("int");

                    b.HasKey("FilterListId", "MaintainerId");

                    b.HasIndex("MaintainerId");

                    b.ToTable("FilterListMaintainer");
                });

            modelBuilder.Entity("FilterLists.Api.Persistence.Entities.FilterListSyntax", b =>
                {
                    b.Property<int>("FilterListId")
                        .HasColumnType("int");

                    b.Property<int>("SyntaxId")
                        .HasColumnType("int");

                    b.HasKey("FilterListId", "SyntaxId");

                    b.HasIndex("SyntaxId");

                    b.ToTable("FilterListSyntax");
                });

            modelBuilder.Entity("FilterLists.Api.Persistence.Entities.FilterListTag", b =>
                {
                    b.Property<int>("FilterListId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("FilterListId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("FilterListTag");
                });

            modelBuilder.Entity("FilterLists.Api.Persistence.Entities.Fork", b =>
                {
                    b.Property<int>("ForkFilterListId")
                        .HasColumnType("int");

                    b.Property<int>("UpstreamFilterListId")
                        .HasColumnType("int");

                    b.HasKey("ForkFilterListId", "UpstreamFilterListId");

                    b.HasIndex("UpstreamFilterListId");

                    b.ToTable("Fork");
                });

            modelBuilder.Entity("FilterLists.Api.Persistence.Entities.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Iso6391")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nchar(2)")
                        .IsFixedLength();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.HasKey("Id");

                    b.HasIndex("Iso6391")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Language");
                });

            modelBuilder.Entity("FilterLists.Api.Persistence.Entities.License", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<bool>("PermitsCommercialUse")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("PermitsDistribution")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("PermitsModification")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Url")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("License");
                });

            modelBuilder.Entity("FilterLists.Api.Persistence.Entities.Maintainer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("TwitterHandle")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("Url")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Maintainer");
                });

            modelBuilder.Entity("FilterLists.Api.Persistence.Entities.Merge", b =>
                {
                    b.Property<int>("IncludedInFilterListId")
                        .HasColumnType("int");

                    b.Property<int>("IncludesFilterListId")
                        .HasColumnType("int");

                    b.HasKey("IncludedInFilterListId", "IncludesFilterListId");

                    b.HasIndex("IncludesFilterListId");

                    b.ToTable("Merge");
                });

            modelBuilder.Entity("FilterLists.Api.Persistence.Entities.Software", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("DownloadUrl")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("HomeUrl")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<bool>("SupportsAbpUrlScheme")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Software");
                });

            modelBuilder.Entity("FilterLists.Api.Persistence.Entities.SoftwareSyntax", b =>
                {
                    b.Property<int>("SoftwareId")
                        .HasColumnType("int");

                    b.Property<int>("SyntaxId")
                        .HasColumnType("int");

                    b.HasKey("SoftwareId", "SyntaxId");

                    b.HasIndex("SyntaxId");

                    b.ToTable("SoftwareSyntax");
                });

            modelBuilder.Entity("FilterLists.Api.Persistence.Entities.Syntax", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("Url")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Syntax");
                });

            modelBuilder.Entity("FilterLists.Api.Persistence.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("FilterLists.Api.Persistence.Entities.Dependent", b =>
                {
                    b.HasOne("FilterLists.Api.Persistence.Entities.FilterList", null)
                        .WithMany()
                        .HasForeignKey("DependencyFilterListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FilterLists.Api.Persistence.Entities.FilterList", null)
                        .WithMany()
                        .HasForeignKey("DependentFilterListId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FilterLists.Api.Persistence.Entities.FilterList", b =>
                {
                    b.HasOne("FilterLists.Api.Persistence.Entities.License", "License")
                        .WithMany("FilterLists")
                        .HasForeignKey("LicenseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsMany("FilterLists.Api.Persistence.Entities.FilterListViewUrl", "ViewUrls", b1 =>
                        {
                            b1.Property<int>("FilterListId")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<int>("Primariness")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasDefaultValue(1);

                            b1.Property<int>("SegmentNumber")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasDefaultValue(1);

                            b1.Property<string>("Url")
                                .IsRequired()
                                .HasMaxLength(4000)
                                .HasColumnType("nvarchar(4000)");

                            b1.HasKey("FilterListId", "Id");

                            b1.HasIndex("FilterListId", "SegmentNumber", "Primariness")
                                .IsUnique();

                            b1.ToTable("FilterListViewUrl");

                            b1.WithOwner("FilterList")
                                .HasForeignKey("FilterListId");

                            b1.Navigation("FilterList");
                        });

                    b.Navigation("License");

                    b.Navigation("ViewUrls");
                });

            modelBuilder.Entity("FilterLists.Api.Persistence.Entities.FilterListLanguage", b =>
                {
                    b.HasOne("FilterLists.Api.Persistence.Entities.FilterList", null)
                        .WithMany()
                        .HasForeignKey("FilterListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FilterLists.Api.Persistence.Entities.Language", null)
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FilterLists.Api.Persistence.Entities.FilterListMaintainer", b =>
                {
                    b.HasOne("FilterLists.Api.Persistence.Entities.FilterList", null)
                        .WithMany()
                        .HasForeignKey("FilterListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FilterLists.Api.Persistence.Entities.Maintainer", null)
                        .WithMany()
                        .HasForeignKey("MaintainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FilterLists.Api.Persistence.Entities.FilterListSyntax", b =>
                {
                    b.HasOne("FilterLists.Api.Persistence.Entities.FilterList", null)
                        .WithMany()
                        .HasForeignKey("FilterListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FilterLists.Api.Persistence.Entities.Syntax", null)
                        .WithMany()
                        .HasForeignKey("SyntaxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FilterLists.Api.Persistence.Entities.FilterListTag", b =>
                {
                    b.HasOne("FilterLists.Api.Persistence.Entities.FilterList", null)
                        .WithMany()
                        .HasForeignKey("FilterListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FilterLists.Api.Persistence.Entities.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FilterLists.Api.Persistence.Entities.Fork", b =>
                {
                    b.HasOne("FilterLists.Api.Persistence.Entities.FilterList", null)
                        .WithMany()
                        .HasForeignKey("ForkFilterListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FilterLists.Api.Persistence.Entities.FilterList", null)
                        .WithMany()
                        .HasForeignKey("UpstreamFilterListId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FilterLists.Api.Persistence.Entities.Merge", b =>
                {
                    b.HasOne("FilterLists.Api.Persistence.Entities.FilterList", null)
                        .WithMany()
                        .HasForeignKey("IncludedInFilterListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FilterLists.Api.Persistence.Entities.FilterList", null)
                        .WithMany()
                        .HasForeignKey("IncludesFilterListId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FilterLists.Api.Persistence.Entities.SoftwareSyntax", b =>
                {
                    b.HasOne("FilterLists.Api.Persistence.Entities.Software", null)
                        .WithMany()
                        .HasForeignKey("SoftwareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FilterLists.Api.Persistence.Entities.Syntax", null)
                        .WithMany()
                        .HasForeignKey("SyntaxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FilterLists.Api.Persistence.Entities.License", b =>
                {
                    b.Navigation("FilterLists");
                });
#pragma warning restore 612, 618
        }
    }
}

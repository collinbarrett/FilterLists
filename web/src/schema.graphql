type Tag implements Node {
  id: ID!
  name: String!
  description: String
  filterLists: [FilterList!]!
}

type Syntax implements Node {
  id: ID!
  name: String!
  description: String
  url: URL
  filterLists: [FilterList!]!
  software: [Software!]!
}

type Software implements Node {
  id: ID!
  name: String!
  description: String
  homeUrl: URL
  downloadUrl: URL
  supportsAbpUrlScheme: Boolean!
  syntaxes: [Syntax!]!
}

type Maintainer implements Node {
  id: ID!
  name: String!
  url: URL
  emailAddress: String
  twitterHandle: String
  filterLists: [FilterList!]!
}

type License implements Node {
  id: ID!
  name: String!
  url: URL
  permitsModification: Boolean!
  permitsDistribution: Boolean!
  permitsCommercialUse: Boolean!
  filterLists: [FilterList!]!
}

type Language implements Node {
  id: ID!
  iso6391: String!
  name: String!
  filterLists: [FilterList!]!
}

type FilterList implements Node {
  id: ID!
  licenseId: ID!
  name: String!
  description: String
  license: License!
  syntaxes: [Syntax!]!
  languages: [Language!]!
  tags: [Tag!]!
  viewUrls: [FilterListViewUrl!]!
  homeUrl: URL
  onionUrl: URL
  policyUrl: URL
  submissionUrl: URL
  issuesUrl: URL
  forumUrl: URL
  chatUrl: URL
  emailAddress: String
  donateUrl: URL
  maintainers: [Maintainer!]!
  upstreamFilterLists: [FilterList!]!
  forkFilterLists: [FilterList!]!
  includedInFilterLists: [FilterList!]!
  includesFilterLists: [FilterList!]!
  dependencyFilterLists: [FilterList!]!
  dependentFilterLists: [FilterList!]!
}

type Query {
  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node

  """
  Lookup nodes by a list of IDs.
  """
  nodes(
    """
    The list of node IDs.
    """
    ids: [ID!]!
  ): [Node]!
  filterLists(
    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    where: FilterListFilterInput
    order: [FilterListSortInput!]
  ): FilterListsConnection
  languages(
    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    where: LanguageFilterInput
    order: [LanguageSortInput!]
  ): LanguagesConnection
  licenses(
    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    where: LicenseFilterInput
    order: [LicenseSortInput!]
  ): LicensesConnection
  maintainers(
    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    where: MaintainerFilterInput
    order: [MaintainerSortInput!]
  ): MaintainersConnection
  software(
    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    where: SoftwareFilterInput
    order: [SoftwareSortInput!]
  ): SoftwareConnection
  syntaxes(
    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    where: SyntaxFilterInput
    order: [SyntaxSortInput!]
  ): SyntaxesConnection
  tags(
    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    where: TagFilterInput
    order: [TagSortInput!]
  ): TagsConnection
}

"""
The node interface is implemented by entities that have a global unique identifier.
"""
interface Node {
  id: ID!
}

scalar URL

type FilterListViewUrl {
  id: Int!
  filterListId: Int!
  filterList: FilterList!
  segmentNumber: Int!
  primariness: Int!
  url: URL!
}

input FilterListFilterInput {
  and: [FilterListFilterInput!]
  or: [FilterListFilterInput!]
  id: IntOperationFilterInput
  name: StringOperationFilterInput
  description: StringOperationFilterInput
  licenseId: IntOperationFilterInput
  license: LicenseFilterInput
  syntaxes: ListFilterInputTypeOfSyntaxFilterInput
  languages: ListFilterInputTypeOfLanguageFilterInput
  tags: ListFilterInputTypeOfTagFilterInput
  viewUrls: ListFilterInputTypeOfFilterListViewUrlFilterInput
  homeUrl: UrlOperationFilterInput
  onionUrl: UrlOperationFilterInput
  policyUrl: UrlOperationFilterInput
  submissionUrl: UrlOperationFilterInput
  issuesUrl: UrlOperationFilterInput
  forumUrl: UrlOperationFilterInput
  chatUrl: UrlOperationFilterInput
  emailAddress: StringOperationFilterInput
  donateUrl: UrlOperationFilterInput
  maintainers: ListFilterInputTypeOfMaintainerFilterInput
  upstreamFilterLists: ListFilterInputTypeOfFilterListFilterInput
  forkFilterLists: ListFilterInputTypeOfFilterListFilterInput
  includedInFilterLists: ListFilterInputTypeOfFilterListFilterInput
  includesFilterLists: ListFilterInputTypeOfFilterListFilterInput
  dependencyFilterLists: ListFilterInputTypeOfFilterListFilterInput
  dependentFilterLists: ListFilterInputTypeOfFilterListFilterInput
}

input FilterListSortInput {
  id: SortEnumType
  name: SortEnumType
  description: SortEnumType
  licenseId: SortEnumType
  license: LicenseSortInput
  homeUrl: UriSortInput
  onionUrl: UriSortInput
  policyUrl: UriSortInput
  submissionUrl: UriSortInput
  issuesUrl: UriSortInput
  forumUrl: UriSortInput
  chatUrl: UriSortInput
  emailAddress: SortEnumType
  donateUrl: UriSortInput
}

input LanguageFilterInput {
  and: [LanguageFilterInput!]
  or: [LanguageFilterInput!]
  id: IntOperationFilterInput
  iso6391: StringOperationFilterInput
  name: StringOperationFilterInput
  filterLists: ListFilterInputTypeOfFilterListFilterInput
}

input LanguageSortInput {
  id: SortEnumType
  iso6391: SortEnumType
  name: SortEnumType
}

input LicenseFilterInput {
  and: [LicenseFilterInput!]
  or: [LicenseFilterInput!]
  id: IntOperationFilterInput
  name: StringOperationFilterInput
  url: UrlOperationFilterInput
  permitsModification: BooleanOperationFilterInput
  permitsDistribution: BooleanOperationFilterInput
  permitsCommercialUse: BooleanOperationFilterInput
  filterLists: ListFilterInputTypeOfFilterListFilterInput
}

input LicenseSortInput {
  id: SortEnumType
  name: SortEnumType
  url: UriSortInput
  permitsModification: SortEnumType
  permitsDistribution: SortEnumType
  permitsCommercialUse: SortEnumType
}

input MaintainerFilterInput {
  and: [MaintainerFilterInput!]
  or: [MaintainerFilterInput!]
  id: IntOperationFilterInput
  name: StringOperationFilterInput
  url: UrlOperationFilterInput
  emailAddress: StringOperationFilterInput
  twitterHandle: StringOperationFilterInput
  filterLists: ListFilterInputTypeOfFilterListFilterInput
}

input MaintainerSortInput {
  id: SortEnumType
  name: SortEnumType
  url: UriSortInput
  emailAddress: SortEnumType
  twitterHandle: SortEnumType
}

input SoftwareFilterInput {
  and: [SoftwareFilterInput!]
  or: [SoftwareFilterInput!]
  id: IntOperationFilterInput
  name: StringOperationFilterInput
  description: StringOperationFilterInput
  homeUrl: UrlOperationFilterInput
  downloadUrl: UrlOperationFilterInput
  supportsAbpUrlScheme: BooleanOperationFilterInput
  syntaxes: ListFilterInputTypeOfSyntaxFilterInput
}

input SoftwareSortInput {
  id: SortEnumType
  name: SortEnumType
  description: SortEnumType
  homeUrl: UriSortInput
  downloadUrl: UriSortInput
  supportsAbpUrlScheme: SortEnumType
}

input SyntaxFilterInput {
  and: [SyntaxFilterInput!]
  or: [SyntaxFilterInput!]
  id: IntOperationFilterInput
  name: StringOperationFilterInput
  description: StringOperationFilterInput
  url: UrlOperationFilterInput
  filterLists: ListFilterInputTypeOfFilterListFilterInput
  software: ListFilterInputTypeOfSoftwareFilterInput
}

input SyntaxSortInput {
  id: SortEnumType
  name: SortEnumType
  description: SortEnumType
  url: UriSortInput
}

input TagFilterInput {
  and: [TagFilterInput!]
  or: [TagFilterInput!]
  id: IntOperationFilterInput
  name: StringOperationFilterInput
  description: StringOperationFilterInput
  filterLists: ListFilterInputTypeOfFilterListFilterInput
}

input TagSortInput {
  id: SortEnumType
  name: SortEnumType
  description: SortEnumType
}

"""
A connection to a list of items.
"""
type FilterListsConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [FilterListsEdge!]

  """
  A flattened list of the nodes.
  """
  nodes: [FilterList!]

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
A connection to a list of items.
"""
type LanguagesConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [LanguagesEdge!]

  """
  A flattened list of the nodes.
  """
  nodes: [Language!]

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
A connection to a list of items.
"""
type LicensesConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [LicensesEdge!]

  """
  A flattened list of the nodes.
  """
  nodes: [License!]

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
A connection to a list of items.
"""
type MaintainersConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [MaintainersEdge!]

  """
  A flattened list of the nodes.
  """
  nodes: [Maintainer!]

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
A connection to a list of items.
"""
type SoftwareConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [SoftwareEdge!]

  """
  A flattened list of the nodes.
  """
  nodes: [Software!]

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
A connection to a list of items.
"""
type SyntaxesConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [SyntaxesEdge!]

  """
  A flattened list of the nodes.
  """
  nodes: [Syntax!]

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
A connection to a list of items.
"""
type TagsConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [TagsEdge!]

  """
  A flattened list of the nodes.
  """
  nodes: [Tag!]

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

input IntOperationFilterInput {
  eq: Int
  neq: Int
  in: [Int]
  nin: [Int]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

input ListFilterInputTypeOfSyntaxFilterInput {
  all: SyntaxFilterInput
  none: SyntaxFilterInput
  some: SyntaxFilterInput
  any: Boolean
}

input ListFilterInputTypeOfLanguageFilterInput {
  all: LanguageFilterInput
  none: LanguageFilterInput
  some: LanguageFilterInput
  any: Boolean
}

input ListFilterInputTypeOfTagFilterInput {
  all: TagFilterInput
  none: TagFilterInput
  some: TagFilterInput
  any: Boolean
}

input ListFilterInputTypeOfFilterListViewUrlFilterInput {
  all: FilterListViewUrlFilterInput
  none: FilterListViewUrlFilterInput
  some: FilterListViewUrlFilterInput
  any: Boolean
}

input UrlOperationFilterInput {
  eq: URL
  neq: URL
  in: [URL]
  nin: [URL]
  gt: URL
  ngt: URL
  gte: URL
  ngte: URL
  lt: URL
  nlt: URL
  lte: URL
  nlte: URL
}

input ListFilterInputTypeOfMaintainerFilterInput {
  all: MaintainerFilterInput
  none: MaintainerFilterInput
  some: MaintainerFilterInput
  any: Boolean
}

input ListFilterInputTypeOfFilterListFilterInput {
  all: FilterListFilterInput
  none: FilterListFilterInput
  some: FilterListFilterInput
  any: Boolean
}

enum SortEnumType {
  ASC
  DESC
}

input UriSortInput {
  absolutePath: SortEnumType
  absoluteUri: SortEnumType
  localPath: SortEnumType
  authority: SortEnumType
  hostNameType: SortEnumType
  isDefaultPort: SortEnumType
  isFile: SortEnumType
  isLoopback: SortEnumType
  pathAndQuery: SortEnumType
  isUnc: SortEnumType
  host: SortEnumType
  port: SortEnumType
  query: SortEnumType
  fragment: SortEnumType
  scheme: SortEnumType
  originalString: SortEnumType
  dnsSafeHost: SortEnumType
  idnHost: SortEnumType
  isAbsoluteUri: SortEnumType
  userEscaped: SortEnumType
  userInfo: SortEnumType
}

input BooleanOperationFilterInput {
  eq: Boolean
  neq: Boolean
}

input ListFilterInputTypeOfSoftwareFilterInput {
  all: SoftwareFilterInput
  none: SoftwareFilterInput
  some: SoftwareFilterInput
  any: Boolean
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  Indicates whether more edges exist following the set defined by the clients arguments.
  """
  hasNextPage: Boolean!

  """
  Indicates whether more edges exist prior the set defined by the clients arguments.
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String

  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

"""
An edge in a connection.
"""
type FilterListsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: FilterList!
}

"""
An edge in a connection.
"""
type LanguagesEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Language!
}

"""
An edge in a connection.
"""
type LicensesEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: License!
}

"""
An edge in a connection.
"""
type MaintainersEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Maintainer!
}

"""
An edge in a connection.
"""
type SoftwareEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Software!
}

"""
An edge in a connection.
"""
type SyntaxesEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Syntax!
}

"""
An edge in a connection.
"""
type TagsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Tag!
}

input FilterListViewUrlFilterInput {
  and: [FilterListViewUrlFilterInput!]
  or: [FilterListViewUrlFilterInput!]
  id: IntOperationFilterInput
  filterListId: IntOperationFilterInput
  filterList: FilterListFilterInput
  segmentNumber: IntOperationFilterInput
  primariness: IntOperationFilterInput
  url: UrlOperationFilterInput
}
